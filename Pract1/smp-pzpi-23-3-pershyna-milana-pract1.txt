Міністерство освіти та науки України
Харківський національний університет радіоелектроніки


Кафедра програмної інженерії






ЗВІТ
ПРО ПРАКТИЧНУ РОБОТУ №1
з дисципліни «Скриптові мови програмування»






Виконала:
ст. гр. ПЗПІ-23-3 
Першина М. А. 

Перевірив:
Ст. викл. кафедри ПІ
Сокорчук І.П.

Харків, 2025 р. 

	1 Мета роботи:
Навчитися працювати зі скриптами командного інтерпретатора Bash, освоїти основи побудови умов, циклів, функцій та управління правами доступу до файлів. 

 	2 Завдання:
Метою завдання є створення Bash-скрипта, який відображає на екрані симетричну ялинку, що складається з: 
двох ярусів гілок у вигляді рівнобедрених трикутників; 
стовбура; 
шара снігу внизу. 
У скрипті обов’язково повинні бути реалізовані конструкції: 

if ... then ... fi 

while ... do ... done 

until ... do ... done 

for ... in .. do ... done 

for ((...)); do ... done 
обов’язковим є використання функції 
Параметри запуску скрипта: 
перший параметр — висота всієї ялинки (включно зі снігом); 
другий параметр — ширина шару снігу. 
Параметри повинні бути додатніми числами, інакше скрипт повинен повідомити про помилку через стандартний потік помилок та повернути код помилки. 
Також треба дотриматися таких умов щодо самого файлу скрипта: 
Файл скрипта повинен бути виконуваним для всіх користувачів системи. 
Право редагування повинен мати лише власник скрипта. 

3 Хід роботи 
Створимо файл скрипта з відпопідним до вимог іменем: 

touch $(whoami)-task1 

 

Зробимо файл виконуваним: 

chmod +x pzpi-23-3-pershyna-milana-task1 

 

Відкриємо файл для редагування: 

 

nano pzpi-23-3-pershyna-milana-task1 

 

Реалізуємо основний програмний скрипт (повний скрипт наведено у Додатку А): 

 

Перевірка наявності аргументів - якщо хоча б один параметр не передано, виводиться помилка та завершення скрипта з кодом 1. 

#!/bin/bash  

 

if [[ -z "$1" || -z "$2" ]]; then 

    echo "Помилка: Вкажіть два параметри - висоту ялинки та ширину снігу!" >&2 

    exit 1 

fi 

 

Перевірка, що аргументи — додатні цілі числа: регулярний вираз ^[0-9]+$ означає: один або більше символів від 0 до 9.  ! [[ ... ]] — інверсія умови: якщо аргумент не є числом, виконується помилка. 

if ! [[ "$1" =~ ^[0-9]+$ ]] || ! [[ "$2" =~ ^[0-9]+$ ]]; then 

    echo "Помилка: Аргументи повинні бути додатними цілими числами!" >&2 

    exit 1 

fi 

 

Мінімальні обмеження для побудови ялинки - перевірка, чи параметри достатні для побудови повноцінної ялинки (2 яруси, стовбур, сніг) 

if [[ $height -lt 4 || $snow_width -lt 5 ]]; then 

    echo "Помилка: Мінімальна висота - 4, мінімальна ширина снігу - 5!" >&2 

    exit 1 

fi 

 

 

У функції побудови ярусу символи * та # чергуються залежно від парності рядка: якщо рядок має непарний номер — виводиться *, якщо парний — #. Для організації побудови використовується цикл for ((...)). Щоб забезпечити центроване вирівнювання кожного рядка ярусу, використовується змінна padding, яка розраховується як кількість пробілів зліва до початку символів. Додатковий параметр skip_first дозволяє пропустити перший рядок при побудові другого ярусу, щоб уникнути дублювання верхнього рядка.  

 

draw_tier() { 

    local width=$1   # Ширина снігу 

    local height=$2  # Висота одного ярусу 

    local tier_width=$((width - 2)) # Ширина ярусу (на 2 менше, ніж сніг) 

    local skip_first=$3 # Пропустити перший ряд (для другого ярусу) 

 

    for ((i = 1; i <= height; i++)); do 

        if [[ $skip_first -eq 1 && $i -eq 1 ]]; then 

            continue  # Пропускаємо перший ряд для другого ярусу 

        fi 

 

        row_width=$((2 * i - 1)) # Кількість символів у рядку 

        # Визначаємо символ ('*' або '#') 

        if ((i % 2 == 1)); then 

            char="*" 

        else 

            char="#" 

        fi 

 

        local padding=$(((tier_width - row_width) / 2)) # Відступи для центрування 

 

        printf "%*s" "$padding" "" 

        printf "%s" "$(printf "%${row_width}s" | tr ' ' "$char")" 

        printf "\n" 

    done 

} 

 

 

Стовбур ялинки реалізується як два рядки із символами. Для цього використовується цикл for ((i = 0; i < 2; i++)), який повторює побудову рядка двічі. Центрування стовбура виконується так само, як і для ярусів гілок — за допомогою змінної padding, яка визначає кількість пробілів перед символами ###, щоб вони знаходилися посередині відносно загальної ширини снігового шару. 

draw_trunk() { 

    local width=$1 

    local trunk_width=3 

    local padding=$(((width - trunk_width) / 2)) 

 

    for ((i = 0; i < 2; i++)); do 

        printf "%*s###\n" "$padding" "" 

    done 

} 

Сніг на ялинці формується як один суцільний рядок із символів * шириною, заданою параметром snow_width. Для цього використовується конструкція printf "%s\n" "$(printf "%${width}s" | tr ' ' '*')" — спочатку створюється рядок з потрібною кількістю пробілів (%${width}s), після чого команда tr замінює кожен пробіл на зірочку *. 

draw_snow() { 

    local width=$1 

    printf "%s\n" "$(printf "%${width}s" | tr ' ' '*')" 

} 

 

Після отримання значень параметрів скрипт виконує їх коригування до потрібного формату. Висота ялинки округлюється до найближчого парного числа у меншу сторону (height=$((height / 2 * 2))), оскільки кожен ярус має однакову кількість рядків. Ширина снігового шару округлюється до найближчого непарного числа (snow_width=$((snow_width / 2 * 2 + 1))), щоб забезпечити симетричне центрування трикутників та стовбура.  

 

height=$((height / 2 * 2))        # Округлення до парного числа 

snow_width=$((snow_width / 2 * 2 + 1))  # Округлення до непарного числа 

 

Спочатку виводиться перший ярус повністю, далі — другий ярус. Потім додається стовбур, вирівняний по центру, і в самому кінці друкується сніг —ряд зірочок. 

draw_tier "$snow_width" "$tier_height" 0  # Перший ярус 

draw_tier "$snow_width" "$tier_height" 1  # Другий ярус без першої зірки 

draw_trunk "$snow_width"  # Стовбур 

draw_snow "$snow_width"   # Сніг 

exit 0 

Команда для виконання скрипта: 

~/pzpi-23-3-pershyna-milana-task1 11 16 

 

 

Висновок 
 У результаті виконання завдання було отримано практичний досвід роботи зі скриптами Bash, а також закріплено знання щодо використання умовних конструкцій, циклів, функцій і роботи з параметрами скрипта. Начилися встановлювати права доступу до файлів. 



ДОДАТОК А 
Повний код програми 

#!/bin/bash 

 

# Перевіряємо, чи передано два аргументи 

if [[ -z "$1" || -z "$2" ]]; then 

    echo "Помилка: Вкажіть два параметри - висоту ялинки та ширину снігу!" >&2 

    exit 1 

fi 

 

# Отримуємо числа з аргументів (тільки цілі позитивні значення) 

if ! [[ "$1" =~ ^[0-9]+$ ]] || ! [[ "$2" =~ ^[0-9]+$ ]]; then 

    echo "Помилка: Аргументи повинні бути додатними цілими числами!" >&2 

    exit 1 

fi 

 

# Присвоюємо параметри змінним 

height=$1 

snow_width=$2 

 

# Функція для друку одного ярусу ялинки 

draw_tier() { 

    local width=$1   # Ширина снігу 

    local height=$2  # Висота одного ярусу 

    local tier_width=$((width - 2)) # Ширина ярусу (на 2 менше, ніж сніг) 

    local skip_first=$3 # Пропустити перший ряд (для другого ярусу) 

 

    for ((i = 1; i <= height; i++)); do 

        if [[ $skip_first -eq 1 && $i -eq 1 ]]; then 

            continue  # Пропускаємо перший ряд для другого ярусу 

        fi 

 

        row_width=$((2 * i - 1)) # Кількість символів у рядку 

        # Визначаємо символ ('*' або '#') 

        if ((i % 2 == 1)); then 

            char="*" 

        else 

            char="#" 

        fi 

 

        local padding=$(((tier_width - row_width) / 2)) # Відступи для центрування 

 

        printf "%*s" "$padding" "" 

        printf "%s" "$(printf "%${row_width}s" | tr ' ' "$char")" 

        printf "\n" 

    done 

} 

 

# Функція для друку стовбура 

draw_trunk() { 

    local width=$1 

    local trunk_width=3 

    local padding=$(((width - trunk_width) / 2)) 

 

    for ((i = 0; i < 2; i++)); do 

        printf "%*s###\n" "$padding" "" 

    done 

} 

 

# Функція для друку снігу 

draw_snow() { 
    local width=$1 
    printf "%s\n" "$(printf "%${width}s" | tr ' ' '*')" 
} 

 

# Округлення до потрібних значень 
height=$((height / 2 * 2))        # Округлення до парного числа 
snow_width=$((snow_width / 2 * 2 + 1))  # Округлення до непарного числа 

 

# Мінімальні допустимі значення 
if [[ $height -lt 4 || $snow_width -lt 5 ]]; then 
    echo "Помилка: Мінімальна висота - 4, мінімальна ширина снігу - 5!" >&2 
    exit 1 
fi 

tier_height=$((height / 2))  # Кількість рядків у кожному ярусі 
 

# ===== Вивід ялинки ===== 
draw_tier "$snow_width" "$tier_height" 0  # Перший ярус 
draw_tier "$snow_width" "$tier_height" 1  # Другий ярус без першої зірки 
draw_trunk "$snow_width"  # Стовбур 
draw_snow "$snow_width"   # Сніг 


exit 0 
